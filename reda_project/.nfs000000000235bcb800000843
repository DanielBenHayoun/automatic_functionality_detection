from typing import Dict, Any

import angr
import os
import pickle
import re
import time
import logging
import json
import argparse
import itertools
from glob import glob




def generate_dataset(train_binaries, dataset_name):
    dataset_dir = f"datasets/{dataset_name}"
    os.makedirs(dataset_dir, exist_ok=True)
    analysed_funcs = get_analysed_funcs(dataset_dir)
    for binary in train_binaries:
        analysed_funcs = analyse_binary(analysed_funcs, binary, dataset_dir)




def get_cfg_funcs(proj, binary, excluded):
    """
    get functions that are suitable for analysis, (funcs that are defined in the binary and not libc funcs...)
    """
    return list(filter(None, [f if f.binary_name == binary and (not f.is_plt) and not f.name.startswith(
        "sub_") and not f.name.startswith("_") and f.name not in excluded else None for f in
                              proj.kb.functions.values()]))



def gen_new_name(old_name, counters):
    if re.match(r"mem", old_name):
        return 'mem_%d' % next(counters['mem'])
    if re.match(r"fake_ret_value", old_name):
        return 'ret_%d' % next(counters['ret'])
    if re.match(r"reg", old_name):
        return re.sub("(_[0-9]+)+", '', old_name)
    if re.match(r"unconstrained_ret", old_name):
        return re.sub("(_[0-9]+)+", '', old_name[len("unconstrained_ret_") : ])
    return old_name

